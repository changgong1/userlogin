// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/user_login.proto

#include "proto/user_login.pb.h"
#include "proto/user_login.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace userservice {

static const char* UserLoginService_method_names[] = {
  "/userservice.UserLoginService/UserRegister",
  "/userservice.UserLoginService/UserLogin",
  "/userservice.UserLoginService/TokenCheck",
};

std::unique_ptr< UserLoginService::Stub> UserLoginService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< UserLoginService::Stub> stub(new UserLoginService::Stub(channel));
  return stub;
}

UserLoginService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_UserRegister_(UserLoginService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UserLogin_(UserLoginService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TokenCheck_(UserLoginService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status UserLoginService::Stub::UserRegister(::grpc::ClientContext* context, const ::userservice::LoginRequest& request, ::userservice::TokenReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UserRegister_, context, request, response);
}

void UserLoginService::Stub::experimental_async::UserRegister(::grpc::ClientContext* context, const ::userservice::LoginRequest* request, ::userservice::TokenReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UserRegister_, context, request, response, std::move(f));
}

void UserLoginService::Stub::experimental_async::UserRegister(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::userservice::TokenReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UserRegister_, context, request, response, std::move(f));
}

void UserLoginService::Stub::experimental_async::UserRegister(::grpc::ClientContext* context, const ::userservice::LoginRequest* request, ::userservice::TokenReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UserRegister_, context, request, response, reactor);
}

void UserLoginService::Stub::experimental_async::UserRegister(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::userservice::TokenReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UserRegister_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::userservice::TokenReply>* UserLoginService::Stub::AsyncUserRegisterRaw(::grpc::ClientContext* context, const ::userservice::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::userservice::TokenReply>::Create(channel_.get(), cq, rpcmethod_UserRegister_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::userservice::TokenReply>* UserLoginService::Stub::PrepareAsyncUserRegisterRaw(::grpc::ClientContext* context, const ::userservice::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::userservice::TokenReply>::Create(channel_.get(), cq, rpcmethod_UserRegister_, context, request, false);
}

::grpc::Status UserLoginService::Stub::UserLogin(::grpc::ClientContext* context, const ::userservice::LoginRequest& request, ::userservice::TokenReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UserLogin_, context, request, response);
}

void UserLoginService::Stub::experimental_async::UserLogin(::grpc::ClientContext* context, const ::userservice::LoginRequest* request, ::userservice::TokenReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UserLogin_, context, request, response, std::move(f));
}

void UserLoginService::Stub::experimental_async::UserLogin(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::userservice::TokenReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UserLogin_, context, request, response, std::move(f));
}

void UserLoginService::Stub::experimental_async::UserLogin(::grpc::ClientContext* context, const ::userservice::LoginRequest* request, ::userservice::TokenReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UserLogin_, context, request, response, reactor);
}

void UserLoginService::Stub::experimental_async::UserLogin(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::userservice::TokenReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UserLogin_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::userservice::TokenReply>* UserLoginService::Stub::AsyncUserLoginRaw(::grpc::ClientContext* context, const ::userservice::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::userservice::TokenReply>::Create(channel_.get(), cq, rpcmethod_UserLogin_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::userservice::TokenReply>* UserLoginService::Stub::PrepareAsyncUserLoginRaw(::grpc::ClientContext* context, const ::userservice::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::userservice::TokenReply>::Create(channel_.get(), cq, rpcmethod_UserLogin_, context, request, false);
}

::grpc::Status UserLoginService::Stub::TokenCheck(::grpc::ClientContext* context, const ::userservice::TokenCheckRequest& request, ::userservice::TokenCheckReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_TokenCheck_, context, request, response);
}

void UserLoginService::Stub::experimental_async::TokenCheck(::grpc::ClientContext* context, const ::userservice::TokenCheckRequest* request, ::userservice::TokenCheckReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_TokenCheck_, context, request, response, std::move(f));
}

void UserLoginService::Stub::experimental_async::TokenCheck(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::userservice::TokenCheckReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_TokenCheck_, context, request, response, std::move(f));
}

void UserLoginService::Stub::experimental_async::TokenCheck(::grpc::ClientContext* context, const ::userservice::TokenCheckRequest* request, ::userservice::TokenCheckReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_TokenCheck_, context, request, response, reactor);
}

void UserLoginService::Stub::experimental_async::TokenCheck(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::userservice::TokenCheckReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_TokenCheck_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::userservice::TokenCheckReply>* UserLoginService::Stub::AsyncTokenCheckRaw(::grpc::ClientContext* context, const ::userservice::TokenCheckRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::userservice::TokenCheckReply>::Create(channel_.get(), cq, rpcmethod_TokenCheck_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::userservice::TokenCheckReply>* UserLoginService::Stub::PrepareAsyncTokenCheckRaw(::grpc::ClientContext* context, const ::userservice::TokenCheckRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::userservice::TokenCheckReply>::Create(channel_.get(), cq, rpcmethod_TokenCheck_, context, request, false);
}

UserLoginService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserLoginService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserLoginService::Service, ::userservice::LoginRequest, ::userservice::TokenReply>(
          [](UserLoginService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::userservice::LoginRequest* req,
             ::userservice::TokenReply* resp) {
               return service->UserRegister(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserLoginService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserLoginService::Service, ::userservice::LoginRequest, ::userservice::TokenReply>(
          [](UserLoginService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::userservice::LoginRequest* req,
             ::userservice::TokenReply* resp) {
               return service->UserLogin(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserLoginService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserLoginService::Service, ::userservice::TokenCheckRequest, ::userservice::TokenCheckReply>(
          [](UserLoginService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::userservice::TokenCheckRequest* req,
             ::userservice::TokenCheckReply* resp) {
               return service->TokenCheck(ctx, req, resp);
             }, this)));
}

UserLoginService::Service::~Service() {
}

::grpc::Status UserLoginService::Service::UserRegister(::grpc::ServerContext* context, const ::userservice::LoginRequest* request, ::userservice::TokenReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserLoginService::Service::UserLogin(::grpc::ServerContext* context, const ::userservice::LoginRequest* request, ::userservice::TokenReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserLoginService::Service::TokenCheck(::grpc::ServerContext* context, const ::userservice::TokenCheckRequest* request, ::userservice::TokenCheckReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace userservice

