// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/user_login.proto
#ifndef GRPC_proto_2fuser_5flogin_2eproto__INCLUDED
#define GRPC_proto_2fuser_5flogin_2eproto__INCLUDED

#include "proto/user_login.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace userservice {

class UserLoginService final {
 public:
  static constexpr char const* service_full_name() {
    return "userservice.UserLoginService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status UserRegister(::grpc::ClientContext* context, const ::userservice::LoginRequest& request, ::userservice::TokenReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::userservice::TokenReply>> AsyncUserRegister(::grpc::ClientContext* context, const ::userservice::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::userservice::TokenReply>>(AsyncUserRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::userservice::TokenReply>> PrepareAsyncUserRegister(::grpc::ClientContext* context, const ::userservice::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::userservice::TokenReply>>(PrepareAsyncUserRegisterRaw(context, request, cq));
    }
    virtual ::grpc::Status UserLogin(::grpc::ClientContext* context, const ::userservice::LoginRequest& request, ::userservice::TokenReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::userservice::TokenReply>> AsyncUserLogin(::grpc::ClientContext* context, const ::userservice::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::userservice::TokenReply>>(AsyncUserLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::userservice::TokenReply>> PrepareAsyncUserLogin(::grpc::ClientContext* context, const ::userservice::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::userservice::TokenReply>>(PrepareAsyncUserLoginRaw(context, request, cq));
    }
    virtual ::grpc::Status TokenCheck(::grpc::ClientContext* context, const ::userservice::TokenCheckRequest& request, ::userservice::TokenCheckReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::userservice::TokenCheckReply>> AsyncTokenCheck(::grpc::ClientContext* context, const ::userservice::TokenCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::userservice::TokenCheckReply>>(AsyncTokenCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::userservice::TokenCheckReply>> PrepareAsyncTokenCheck(::grpc::ClientContext* context, const ::userservice::TokenCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::userservice::TokenCheckReply>>(PrepareAsyncTokenCheckRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void UserRegister(::grpc::ClientContext* context, const ::userservice::LoginRequest* request, ::userservice::TokenReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UserRegister(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::userservice::TokenReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UserRegister(::grpc::ClientContext* context, const ::userservice::LoginRequest* request, ::userservice::TokenReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UserRegister(::grpc::ClientContext* context, const ::userservice::LoginRequest* request, ::userservice::TokenReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UserRegister(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::userservice::TokenReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UserRegister(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::userservice::TokenReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void UserLogin(::grpc::ClientContext* context, const ::userservice::LoginRequest* request, ::userservice::TokenReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UserLogin(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::userservice::TokenReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UserLogin(::grpc::ClientContext* context, const ::userservice::LoginRequest* request, ::userservice::TokenReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UserLogin(::grpc::ClientContext* context, const ::userservice::LoginRequest* request, ::userservice::TokenReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UserLogin(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::userservice::TokenReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UserLogin(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::userservice::TokenReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void TokenCheck(::grpc::ClientContext* context, const ::userservice::TokenCheckRequest* request, ::userservice::TokenCheckReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TokenCheck(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::userservice::TokenCheckReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void TokenCheck(::grpc::ClientContext* context, const ::userservice::TokenCheckRequest* request, ::userservice::TokenCheckReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void TokenCheck(::grpc::ClientContext* context, const ::userservice::TokenCheckRequest* request, ::userservice::TokenCheckReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void TokenCheck(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::userservice::TokenCheckReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void TokenCheck(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::userservice::TokenCheckReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::userservice::TokenReply>* AsyncUserRegisterRaw(::grpc::ClientContext* context, const ::userservice::LoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::userservice::TokenReply>* PrepareAsyncUserRegisterRaw(::grpc::ClientContext* context, const ::userservice::LoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::userservice::TokenReply>* AsyncUserLoginRaw(::grpc::ClientContext* context, const ::userservice::LoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::userservice::TokenReply>* PrepareAsyncUserLoginRaw(::grpc::ClientContext* context, const ::userservice::LoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::userservice::TokenCheckReply>* AsyncTokenCheckRaw(::grpc::ClientContext* context, const ::userservice::TokenCheckRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::userservice::TokenCheckReply>* PrepareAsyncTokenCheckRaw(::grpc::ClientContext* context, const ::userservice::TokenCheckRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status UserRegister(::grpc::ClientContext* context, const ::userservice::LoginRequest& request, ::userservice::TokenReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::userservice::TokenReply>> AsyncUserRegister(::grpc::ClientContext* context, const ::userservice::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::userservice::TokenReply>>(AsyncUserRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::userservice::TokenReply>> PrepareAsyncUserRegister(::grpc::ClientContext* context, const ::userservice::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::userservice::TokenReply>>(PrepareAsyncUserRegisterRaw(context, request, cq));
    }
    ::grpc::Status UserLogin(::grpc::ClientContext* context, const ::userservice::LoginRequest& request, ::userservice::TokenReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::userservice::TokenReply>> AsyncUserLogin(::grpc::ClientContext* context, const ::userservice::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::userservice::TokenReply>>(AsyncUserLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::userservice::TokenReply>> PrepareAsyncUserLogin(::grpc::ClientContext* context, const ::userservice::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::userservice::TokenReply>>(PrepareAsyncUserLoginRaw(context, request, cq));
    }
    ::grpc::Status TokenCheck(::grpc::ClientContext* context, const ::userservice::TokenCheckRequest& request, ::userservice::TokenCheckReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::userservice::TokenCheckReply>> AsyncTokenCheck(::grpc::ClientContext* context, const ::userservice::TokenCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::userservice::TokenCheckReply>>(AsyncTokenCheckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::userservice::TokenCheckReply>> PrepareAsyncTokenCheck(::grpc::ClientContext* context, const ::userservice::TokenCheckRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::userservice::TokenCheckReply>>(PrepareAsyncTokenCheckRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void UserRegister(::grpc::ClientContext* context, const ::userservice::LoginRequest* request, ::userservice::TokenReply* response, std::function<void(::grpc::Status)>) override;
      void UserRegister(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::userservice::TokenReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UserRegister(::grpc::ClientContext* context, const ::userservice::LoginRequest* request, ::userservice::TokenReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UserRegister(::grpc::ClientContext* context, const ::userservice::LoginRequest* request, ::userservice::TokenReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UserRegister(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::userservice::TokenReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UserRegister(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::userservice::TokenReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UserLogin(::grpc::ClientContext* context, const ::userservice::LoginRequest* request, ::userservice::TokenReply* response, std::function<void(::grpc::Status)>) override;
      void UserLogin(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::userservice::TokenReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UserLogin(::grpc::ClientContext* context, const ::userservice::LoginRequest* request, ::userservice::TokenReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UserLogin(::grpc::ClientContext* context, const ::userservice::LoginRequest* request, ::userservice::TokenReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UserLogin(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::userservice::TokenReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UserLogin(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::userservice::TokenReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void TokenCheck(::grpc::ClientContext* context, const ::userservice::TokenCheckRequest* request, ::userservice::TokenCheckReply* response, std::function<void(::grpc::Status)>) override;
      void TokenCheck(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::userservice::TokenCheckReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void TokenCheck(::grpc::ClientContext* context, const ::userservice::TokenCheckRequest* request, ::userservice::TokenCheckReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void TokenCheck(::grpc::ClientContext* context, const ::userservice::TokenCheckRequest* request, ::userservice::TokenCheckReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void TokenCheck(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::userservice::TokenCheckReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void TokenCheck(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::userservice::TokenCheckReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::userservice::TokenReply>* AsyncUserRegisterRaw(::grpc::ClientContext* context, const ::userservice::LoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::userservice::TokenReply>* PrepareAsyncUserRegisterRaw(::grpc::ClientContext* context, const ::userservice::LoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::userservice::TokenReply>* AsyncUserLoginRaw(::grpc::ClientContext* context, const ::userservice::LoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::userservice::TokenReply>* PrepareAsyncUserLoginRaw(::grpc::ClientContext* context, const ::userservice::LoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::userservice::TokenCheckReply>* AsyncTokenCheckRaw(::grpc::ClientContext* context, const ::userservice::TokenCheckRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::userservice::TokenCheckReply>* PrepareAsyncTokenCheckRaw(::grpc::ClientContext* context, const ::userservice::TokenCheckRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_UserRegister_;
    const ::grpc::internal::RpcMethod rpcmethod_UserLogin_;
    const ::grpc::internal::RpcMethod rpcmethod_TokenCheck_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status UserRegister(::grpc::ServerContext* context, const ::userservice::LoginRequest* request, ::userservice::TokenReply* response);
    virtual ::grpc::Status UserLogin(::grpc::ServerContext* context, const ::userservice::LoginRequest* request, ::userservice::TokenReply* response);
    virtual ::grpc::Status TokenCheck(::grpc::ServerContext* context, const ::userservice::TokenCheckRequest* request, ::userservice::TokenCheckReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_UserRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UserRegister() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_UserRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UserRegister(::grpc::ServerContext* /*context*/, const ::userservice::LoginRequest* /*request*/, ::userservice::TokenReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUserRegister(::grpc::ServerContext* context, ::userservice::LoginRequest* request, ::grpc::ServerAsyncResponseWriter< ::userservice::TokenReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UserLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UserLogin() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_UserLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UserLogin(::grpc::ServerContext* /*context*/, const ::userservice::LoginRequest* /*request*/, ::userservice::TokenReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUserLogin(::grpc::ServerContext* context, ::userservice::LoginRequest* request, ::grpc::ServerAsyncResponseWriter< ::userservice::TokenReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TokenCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TokenCheck() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_TokenCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TokenCheck(::grpc::ServerContext* /*context*/, const ::userservice::TokenCheckRequest* /*request*/, ::userservice::TokenCheckReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTokenCheck(::grpc::ServerContext* context, ::userservice::TokenCheckRequest* request, ::grpc::ServerAsyncResponseWriter< ::userservice::TokenCheckReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_UserRegister<WithAsyncMethod_UserLogin<WithAsyncMethod_TokenCheck<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UserRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UserRegister() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::userservice::LoginRequest, ::userservice::TokenReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::userservice::LoginRequest* request, ::userservice::TokenReply* response) { return this->UserRegister(context, request, response); }));}
    void SetMessageAllocatorFor_UserRegister(
        ::grpc::experimental::MessageAllocator< ::userservice::LoginRequest, ::userservice::TokenReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::userservice::LoginRequest, ::userservice::TokenReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UserRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UserRegister(::grpc::ServerContext* /*context*/, const ::userservice::LoginRequest* /*request*/, ::userservice::TokenReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UserRegister(
      ::grpc::CallbackServerContext* /*context*/, const ::userservice::LoginRequest* /*request*/, ::userservice::TokenReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UserRegister(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::userservice::LoginRequest* /*request*/, ::userservice::TokenReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UserLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UserLogin() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::userservice::LoginRequest, ::userservice::TokenReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::userservice::LoginRequest* request, ::userservice::TokenReply* response) { return this->UserLogin(context, request, response); }));}
    void SetMessageAllocatorFor_UserLogin(
        ::grpc::experimental::MessageAllocator< ::userservice::LoginRequest, ::userservice::TokenReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::userservice::LoginRequest, ::userservice::TokenReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UserLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UserLogin(::grpc::ServerContext* /*context*/, const ::userservice::LoginRequest* /*request*/, ::userservice::TokenReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UserLogin(
      ::grpc::CallbackServerContext* /*context*/, const ::userservice::LoginRequest* /*request*/, ::userservice::TokenReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UserLogin(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::userservice::LoginRequest* /*request*/, ::userservice::TokenReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_TokenCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_TokenCheck() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::userservice::TokenCheckRequest, ::userservice::TokenCheckReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::userservice::TokenCheckRequest* request, ::userservice::TokenCheckReply* response) { return this->TokenCheck(context, request, response); }));}
    void SetMessageAllocatorFor_TokenCheck(
        ::grpc::experimental::MessageAllocator< ::userservice::TokenCheckRequest, ::userservice::TokenCheckReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::userservice::TokenCheckRequest, ::userservice::TokenCheckReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_TokenCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TokenCheck(::grpc::ServerContext* /*context*/, const ::userservice::TokenCheckRequest* /*request*/, ::userservice::TokenCheckReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* TokenCheck(
      ::grpc::CallbackServerContext* /*context*/, const ::userservice::TokenCheckRequest* /*request*/, ::userservice::TokenCheckReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* TokenCheck(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::userservice::TokenCheckRequest* /*request*/, ::userservice::TokenCheckReply* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_UserRegister<ExperimentalWithCallbackMethod_UserLogin<ExperimentalWithCallbackMethod_TokenCheck<Service > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_UserRegister<ExperimentalWithCallbackMethod_UserLogin<ExperimentalWithCallbackMethod_TokenCheck<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_UserRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UserRegister() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_UserRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UserRegister(::grpc::ServerContext* /*context*/, const ::userservice::LoginRequest* /*request*/, ::userservice::TokenReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UserLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UserLogin() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_UserLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UserLogin(::grpc::ServerContext* /*context*/, const ::userservice::LoginRequest* /*request*/, ::userservice::TokenReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TokenCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TokenCheck() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_TokenCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TokenCheck(::grpc::ServerContext* /*context*/, const ::userservice::TokenCheckRequest* /*request*/, ::userservice::TokenCheckReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_UserRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UserRegister() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_UserRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UserRegister(::grpc::ServerContext* /*context*/, const ::userservice::LoginRequest* /*request*/, ::userservice::TokenReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUserRegister(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UserLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UserLogin() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_UserLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UserLogin(::grpc::ServerContext* /*context*/, const ::userservice::LoginRequest* /*request*/, ::userservice::TokenReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUserLogin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TokenCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TokenCheck() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_TokenCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TokenCheck(::grpc::ServerContext* /*context*/, const ::userservice::TokenCheckRequest* /*request*/, ::userservice::TokenCheckReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTokenCheck(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UserRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UserRegister() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UserRegister(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UserRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UserRegister(::grpc::ServerContext* /*context*/, const ::userservice::LoginRequest* /*request*/, ::userservice::TokenReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UserRegister(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UserRegister(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UserLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UserLogin() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UserLogin(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UserLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UserLogin(::grpc::ServerContext* /*context*/, const ::userservice::LoginRequest* /*request*/, ::userservice::TokenReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UserLogin(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UserLogin(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_TokenCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_TokenCheck() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TokenCheck(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_TokenCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TokenCheck(::grpc::ServerContext* /*context*/, const ::userservice::TokenCheckRequest* /*request*/, ::userservice::TokenCheckReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* TokenCheck(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* TokenCheck(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UserRegister : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UserRegister() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::userservice::LoginRequest, ::userservice::TokenReply>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::userservice::LoginRequest, ::userservice::TokenReply>* streamer) {
                       return this->StreamedUserRegister(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UserRegister() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UserRegister(::grpc::ServerContext* /*context*/, const ::userservice::LoginRequest* /*request*/, ::userservice::TokenReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUserRegister(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::userservice::LoginRequest,::userservice::TokenReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UserLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UserLogin() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::userservice::LoginRequest, ::userservice::TokenReply>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::userservice::LoginRequest, ::userservice::TokenReply>* streamer) {
                       return this->StreamedUserLogin(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UserLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UserLogin(::grpc::ServerContext* /*context*/, const ::userservice::LoginRequest* /*request*/, ::userservice::TokenReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUserLogin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::userservice::LoginRequest,::userservice::TokenReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TokenCheck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TokenCheck() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::userservice::TokenCheckRequest, ::userservice::TokenCheckReply>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::userservice::TokenCheckRequest, ::userservice::TokenCheckReply>* streamer) {
                       return this->StreamedTokenCheck(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TokenCheck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TokenCheck(::grpc::ServerContext* /*context*/, const ::userservice::TokenCheckRequest* /*request*/, ::userservice::TokenCheckReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTokenCheck(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::userservice::TokenCheckRequest,::userservice::TokenCheckReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_UserRegister<WithStreamedUnaryMethod_UserLogin<WithStreamedUnaryMethod_TokenCheck<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_UserRegister<WithStreamedUnaryMethod_UserLogin<WithStreamedUnaryMethod_TokenCheck<Service > > > StreamedService;
};

}  // namespace userservice


#endif  // GRPC_proto_2fuser_5flogin_2eproto__INCLUDED
